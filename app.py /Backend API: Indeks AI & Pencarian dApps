from fastapi import FastAPI
from pydantic import BaseModel
import openai
import requests
from elasticsearch import Elasticsearch
import pinecone
from langchain.vectorstores import Pinecone
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.llms import OpenAI

# Inisialisasi FastAPI
app = FastAPI()

# API Key OpenAI
openai.api_key = "YOUR_OPENAI_API_KEY"

# Inisialisasi Elasticsearch untuk indeks pencarian
es = Elasticsearch("http://localhost:9200")

# Inisialisasi Pinecone untuk pencarian vektor AI
pinecone.init(api_key="YOUR_PINECONE_API_KEY", environment="us-west1-gcp")
index = pinecone.Index("pi-ai-search")

# OpenAI Embedding untuk indexing
embedding_model = OpenAIEmbeddings()

# Model Input
class SearchQuery(BaseModel):
    query: str

# Fungsi AI Pencarian dApps
def search_dapps(query):
    vector = embedding_model.embed_query(query)
    search_results = index.query(vector, top_k=5, include_metadata=True)
    
    results = []
    for match in search_results['matches']:
        results.append({
            "name": match['metadata']['name'],
            "description": match['metadata']['description'],
            "url": match['metadata']['url']
        })
    
    return results

# API Endpoint untuk pencarian AI
@app.post("/search")
async def ai_search(request: SearchQuery):
    results = search_dapps(request.query)
    return {"results": results}

# Jalankan server
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
